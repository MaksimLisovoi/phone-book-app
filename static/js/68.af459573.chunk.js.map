{"version":3,"file":"static/js/68.af459573.chunk.js","mappings":"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","sources":["pages/Base.styled.js","redux/selectors.js","components/ContactItem/ContactItem.styled.js","components/Spinner/Spinner.jsx","components/ContactItem/ContactItem.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsList.jsx","components/ContactsForm/validation.js","components/ContactsForm/ContactsForm.jsx","components/ContactFormModal.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\r\nimport { Container } from '@mui/material';\r\n\r\nexport const BaseContainer = styled(Container)`\r\n  min-height: calc(100vh - 140px);\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const selectContacts = state => state.contacts.myContacts;\r\n\r\nexport const selectIsLoading = state => state.contacts.isLoading;\r\n\r\nexport const selectError = state => state.contacts.error;\r\n\r\nexport const selectFilter = state => state.filter;\r\n\r\nexport const selectVisibleContacts = createSelector(\r\n  [selectContacts, selectFilter],\r\n  (contacts, filterValue) => {\r\n    const normalizedFilter = filterValue.toLowerCase();\r\n\r\n    console.log('Я запустился');\r\n\r\n    if (contacts.length > 0) {\r\n      return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\r\n    }\r\n  },\r\n);\r\n","import styled from 'styled-components';\r\n\r\nexport const ContactListItem = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  border: ${p => p.theme.borders.normal};\r\n  border-radius: ${p => p.theme.radii.normal};\r\n  padding: ${p => p.theme.space[4]};\r\n\r\n  :not(:last-child) {\r\n    margin-bottom: ${p => p.theme.space[4]};\r\n  }\r\n`;\r\nexport const Btn = styled.button`\r\n  margin-left: ${p => p.theme.space[4]};\r\n  padding: ${p => p.theme.space[3]};\r\n  background-color: ${p => p.theme.colors.primary};\r\n  color: ${p => p.theme.colors.white};\r\n  border: ${p => p.theme.borders.none};\r\n  border-radius: ${p => p.theme.radii.normal};\r\n  cursor: pointer;\r\n  transition: background-color 200ms ease-in-out;\r\n\r\n  &:disabled {\r\n    background-color: ${p => p.theme.colors.lightgray};\r\n  }\r\n\r\n  &:hover {\r\n    background-color: ${p => p.theme.colors.secondary};\r\n  }\r\n`;\r\n\r\nexport const BtnText = styled.p`\r\n  margin-left: 5px;\r\n`;\r\n\r\nexport const Text = styled.p``;\r\n","import { Box } from 'components/Box';\r\nimport { RotatingLines } from 'react-loader-spinner';\r\n\r\nexport const Spinner = () => {\r\n  return (\r\n    <Box display=\"inline-block\" mr={2}>\r\n      <RotatingLines strokeColor=\"white\" width=\"14\" />\r\n    </Box>\r\n  );\r\n};\r\n","import { ContactListItem } from './ContactItem.styled';\r\n\r\nimport { useDeleteContactMutation } from 'redux/contacts/contactsSlice';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport { Spinner } from 'components/Spinner/Spinner';\r\nimport toast from 'react-hot-toast';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nexport const ContactItem = ({ name, number, id }) => {\r\n  const [deleteContact, { isLoading }] = useDeleteContactMutation();\r\n\r\n  const handleDelete = async contactId => {\r\n    try {\r\n      await deleteContact(contactId);\r\n      toast.success('Контакт удалён');\r\n    } catch (error) {\r\n      toast.error('Ошибка при удалении контакта');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ContactListItem>\r\n      <Typography>\r\n        {name}: {number}\r\n      </Typography>\r\n\r\n      <LoadingButton\r\n        onClick={() => handleDelete(id)}\r\n        loading={isLoading}\r\n        // loadingIndicator=\"Loading…\"\r\n        variant=\"outlined\"\r\n        size=\"small\"\r\n      >\r\n        Delete\r\n      </LoadingButton>\r\n    </ContactListItem>\r\n  );\r\n};\r\n","import { Box } from 'components/Box';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectFilter } from 'redux/selectors';\r\nimport { setFilter } from 'redux/filterSlice';\r\n\r\nexport const Filter = ({ checkContacts }) => {\r\n  const filter = useSelector(selectFilter);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const changeFilter = e => {\r\n    const { value } = e.target;\r\n\r\n    dispatch(setFilter(value));\r\n  };\r\n\r\n  return (\r\n    <Box mb=\"4\" width=\"50%\">\r\n      <TextField\r\n        disabled={!checkContacts}\r\n        fullWidth\r\n        label=\"Filter by name\"\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={changeFilter}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {};\r\n","import PropTypes, { object } from 'prop-types';\r\n\r\nimport { useGetAllContactsQuery } from 'redux/contacts/contactsSlice';\r\nimport { selectFilter } from 'redux/selectors';\r\nimport { useSelector } from 'react-redux';\r\nimport { ContactItem } from '../ContactItem';\r\nimport { Typography } from '@mui/material';\r\nimport { Filter } from 'components/Filter';\r\n\r\nexport const ContactsList = () => {\r\n  const { data: contacts, isLoading, error } = useGetAllContactsQuery();\r\n\r\n  const filterValue = useSelector(selectFilter);\r\n\r\n  const checkContacts = contacts && contacts.length > 0;\r\n\r\n  const getVisibleContacts = () => {\r\n    const normalizedFilter = filterValue.toLowerCase();\r\n\r\n    if (checkContacts) {\r\n      return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\r\n    }\r\n  };\r\n  const filteredContacts = getVisibleContacts();\r\n  const checkRequest = isLoading && !error;\r\n\r\n  return (\r\n    <>\r\n      <Filter checkContacts={checkContacts} />\r\n      {checkRequest ? (\r\n        <b>Request in progress...</b>\r\n      ) : (\r\n        <ul>\r\n          {filteredContacts ? (\r\n            filteredContacts.map(contact => <ContactItem key={contact.id} {...contact} />)\r\n          ) : (\r\n            <Typography fontWeight={500}>There are no contacts in your Phonebook!</Typography>\r\n          )}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(object),\r\n};\r\n","const REQUIRED_FIELD = 'This field is required';\r\n\r\nexport const nameValidation = {\r\n  required: REQUIRED_FIELD,\r\n  validate: value => {\r\n    if (value.match(/[а-яА-Я-0-9]/)) {\r\n      return 'Name may contain only latin letters';\r\n    }\r\n\r\n    return true;\r\n  },\r\n};\r\n\r\nexport const numberValidation = {\r\n  required: REQUIRED_FIELD,\r\n  validate: value => {\r\n    if (value.match(/[а-яА-Я-a-zA-Z]/)) {\r\n      return 'Phone may contain only numbers';\r\n    }\r\n\r\n    return true;\r\n  },\r\n};\r\n","import { useState } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport toast from 'react-hot-toast';\r\nimport { useAddContactMutation, useGetAllContactsQuery } from 'redux/contacts/contactsSlice';\r\nimport { Spinner } from 'components/Spinner/Spinner';\r\n\r\nimport * as React from 'react';\r\n\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport { useForm, Controller, useFormState } from 'react-hook-form';\r\nimport { nameValidation, numberValidation } from './validation';\r\n\r\nexport function ContactsForm({ handleCloseModal }) {\r\n  const { data: contacts } = useGetAllContactsQuery();\r\n\r\n  const [addContact, { isLoading }] = useAddContactMutation();\r\n\r\n  // const contacts = useSelector(selectContacts);\r\n\r\n  const { handleSubmit, control } = useForm({\r\n    defaultValues: {\r\n      name: '',\r\n      number: '',\r\n    },\r\n  });\r\n  const { errors } = useFormState({ control });\r\n\r\n  const myHandleSubmit = async data => {\r\n    if (contacts.some(contact => contact.name.toLowerCase() === data.name.toLowerCase())) {\r\n      return alert(`${data.name} is already in contacts`);\r\n    }\r\n\r\n    try {\r\n      await addContact(data);\r\n      toast.success('Контакт добавлен');\r\n      handleCloseModal();\r\n    } catch (error) {\r\n      toast.error('Ошибка при добавлении контакта');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit(myHandleSubmit)} sx={{ mt: 1 }}>\r\n          <Typography fontSize={24} align=\"center\">\r\n            Add contact\r\n          </Typography>\r\n          <Controller\r\n            rules={nameValidation}\r\n            control={control}\r\n            name=\"name\"\r\n            render={({ field }) => (\r\n              <TextField\r\n                margin=\"normal\"\r\n                fullWidth\r\n                required\r\n                onChange={e => field.onChange(e)}\r\n                type=\"name\"\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                value={field.value}\r\n                helperText={errors.name?.message}\r\n                error={!!errors.name?.message}\r\n              />\r\n            )}\r\n          />\r\n          <Controller\r\n            rules={numberValidation}\r\n            control={control}\r\n            name=\"number\"\r\n            render={({ field }) => (\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                onChange={e => field.onChange(e)}\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                label=\"Phone number\"\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n                value={field.value}\r\n                helperText={errors.number?.message}\r\n                error={!!errors.number?.message}\r\n              />\r\n            )}\r\n          />\r\n          {/* <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            // id={nameInputId}\r\n            onChange={handleChange}\r\n            type=\"name\"\r\n            name=\"name\"\r\n            label=\"Name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          /> */}\r\n          {/* <TextField\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            onChange={handleChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            label=\"Phone number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          /> */}\r\n\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" sx={{ mt: 3, mb: 2 }}>\r\n            {isLoading && <Spinner />}\r\n            Add contact\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nContactsForm.propTypes = {};\r\n","import Box from '@mui/material/Box';\r\nimport { Button } from '@mui/material';\r\nimport { Modal } from '@mui/material';\r\nimport { Fade } from '@mui/material';\r\nimport { Backdrop } from '@mui/material';\r\nimport { ContactsForm } from './ContactsForm';\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: 400,\r\n  bgcolor: 'background.paper',\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nexport const ContactFormModal = ({ isModalOpen, handleCloseModal }) => {\r\n  return (\r\n    <Modal\r\n      open={isModalOpen}\r\n      onClose={handleCloseModal}\r\n      closeAfterTransition\r\n      slots={{ backdrop: Backdrop }}\r\n      slotProps={{\r\n        backdrop: {\r\n          timeout: 500,\r\n        },\r\n      }}\r\n    >\r\n      <Fade in={isModalOpen}>\r\n        <Box sx={style}>\r\n          <ContactsForm handleCloseModal={handleCloseModal} />\r\n        </Box>\r\n      </Fade>\r\n    </Modal>\r\n  );\r\n};\r\n","import { Box } from 'components/Box';\r\n\r\nimport { ContactsList } from 'components/ContactsList';\r\nimport { Button } from '@mui/material';\r\nimport { useState } from 'react';\r\nimport { ContactFormModal } from 'components/ContactFormModal';\r\nimport { GlobalStyle } from 'components/GlobalStyle';\r\nimport Typography from '@mui/material/Typography';\r\nimport { BaseContainer } from './Base.styled';\r\n\r\nexport default function Contacts() {\r\n  const [isModalOpen, setisModalOpen] = useState(false);\r\n\r\n  const handleOpenModal = () => {\r\n    setisModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setisModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <BaseContainer component=\"main\">\r\n      {isModalOpen && (\r\n        <>\r\n          <ContactFormModal isModalOpen={isModalOpen} handleCloseModal={handleCloseModal} />\r\n        </>\r\n      )}\r\n\r\n      <Box p={5}>\r\n        <GlobalStyle />\r\n        <Typography variant=\"h5\" fontSize={28} mb={2}>\r\n          My contacts\r\n        </Typography>\r\n\r\n        <Button onClick={handleOpenModal} variant=\"contained\" sx={{ mb: 2 }}>\r\n          Add Contact\r\n        </Button>\r\n        <ContactsList />\r\n      </Box>\r\n    </BaseContainer>\r\n  );\r\n}\r\n"],"names":["BaseContainer","styled","Container","selectFilter","state","filter","createSelector","contacts","myContacts","filterValue","normalizedFilter","toLowerCase","console","log","length","contact","name","includes","ContactListItem","p","theme","borders","normal","radii","space","colors","primary","white","none","lightgray","secondary","Spinner","Box","display","mr","strokeColor","width","ContactItem","number","id","useDeleteContactMutation","deleteContact","isLoading","handleDelete","contactId","toast","Typography","LoadingButton","onClick","loading","variant","size","Filter","checkContacts","useSelector","dispatch","useDispatch","mb","TextField","disabled","fullWidth","label","type","value","onChange","e","target","setFilter","ContactsList","useGetAllContactsQuery","data","error","filteredContacts","getVisibleContacts","checkRequest","map","fontWeight","REQUIRED_FIELD","nameValidation","required","validate","match","numberValidation","ContactsForm","handleCloseModal","useAddContactMutation","addContact","useForm","defaultValues","handleSubmit","control","errors","useFormState","myHandleSubmit","some","alert","CssBaseline","sx","flexDirection","alignItems","component","onSubmit","mt","fontSize","align","rules","render","field","margin","helperText","message","pattern","title","Button","style","position","top","left","transform","bgcolor","boxShadow","ContactFormModal","isModalOpen","Modal","open","onClose","closeAfterTransition","slots","backdrop","Backdrop","slotProps","timeout","Fade","in","Contacts","useState","setisModalOpen","GlobalStyle"],"sourceRoot":""}